x-service-defaults: &service_defaults
  extra_hosts:
    - "host.docker.internal:host-gateway"

services:
  postgres:
    <<: *service_defaults
    image: postgres:16-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: requirementsdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d requirementsdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    <<: *service_defaults
    image: neo4j:5.21-community
    container_name: neo4j_db
    restart: always
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-neo4j123}
      NEO4J_initial_dbms_default__database: ${NEO4J_DATABASE:-neo4j}
      NEO4J_server_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL:-1G}
      NEO4J_server_memory_heap_max__size: ${NEO4J_HEAP_MAX:-2G}
      NEO4J_server_memory_pagecache_size: ${NEO4J_PAGECACHE:-1G}
      NEO4J_dbms_security_procedures_unrestricted: "gds.*,apoc.*"
      NEO4J_dbms_security_procedures_allowlist: "gds.*,apoc.*"
      NEO4J_server_jvm_additional: "-XX:+ExitOnOutOfMemoryError -XX:MaxDirectMemorySize=4G"
      NEO4J_gds_validate__using__max__memory__estimation: "true"
      # Connector configuration
      NEO4J_server_bolt_listen__address: "0.0.0.0:7687"
      NEO4J_server_http_listen__address: "0.0.0.0:7474"
      NEO4J_db_transaction_timeout: 60s
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      OAI_KEY: ${OAI_KEY:-key}
      OAI_MODEL: ${OAI_MODEL:-gpt-4o}
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
      - neo4j_config:/conf
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u ${NEO4J_USERNAME:-neo4j} -p ${NEO4J_PASSWORD:-neo4j123} 'RETURN 1;'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  db-init-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./db_init_service/Dockerfile
    container_name: db_init_service
    ports:
      - "8001:8000"
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  neo4j-maintenance-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./neo4j_maintanance_service/Dockerfile
    container_name: neo4j_maintenance_service
    ports:
      - "8002:8000"
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  neo4j-schema-init:
    <<: *service_defaults
    image: curlimages/curl:8.7.1
    container_name: neo4j_schema_init
    depends_on:
      neo4j-maintenance-service:
        condition: service_healthy
    networks:
      - microservices_network
    # Run once: initialize Neo4j schema via maintenance service endpoint
    command: ["-X", "POST", "-f", "http://neo4j-maintenance-service:8000/init-neo4j"]
    restart: "no"

  neo4j-ingestion-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./neo4j_ingestion_service/Dockerfile
    container_name: neo4j_ingestion_service
    ports:
      - "8006:8000"
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    depends_on:
      neo4j-maintenance-service:
        condition: service_healthy
      neo4j-schema-init:
        condition: service_completed_successfully
    networks:
      - microservices_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  project-management-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./project_management_service/Dockerfile
    container_name: project_management_service
    ports:
      - "8003:8000"
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    depends_on:
      db-init-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  ui-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./ui_service/Dockerfile
    container_name: ui_service
    ports:
      - "8007:8000"
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    depends_on:
      redis:
        condition: service_healthy
      project-management-service:
        condition: service_healthy
      mock-auth-service:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  document-processing-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./document_processing_service/Dockerfile
    container_name: document_processing_service
    ports:
      - "8004:8000"
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/celery"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  neo4j-retrieval-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./neo4j_retrieval_service/Dockerfile
    container_name: neo4j_retrieval_service
    ports:
      - "8008:8000"
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  ai-workflow-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./ai_workflow_service/Dockerfile
    container_name: ai_workflow_service
    ports:
      - "8009:8000"
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    depends_on:
      redis:
        condition: service_healthy
      neo4j-retrieval-service:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Redis for Celery background tasks
  redis:
    <<: *service_defaults
    image: redis:7-alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Azurite for Azure Blob Storage emulation
  azurite:
    <<: *service_defaults
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: azurite_storage
    ports:
      - "10000:10000"  # Blob storage
      - "10001:10001"  # Queue storage
      - "10002:10002"  # Table storage
    command: "azurite --skipApiVersionCheck --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --blobPort 10000 --queuePort 10001 --tablePort 10002 --loose --debug /workspace/debug.log"
    volumes:
      - azurite_data:/workspace
    networks:
      - microservices_network
    restart: unless-stopped
  
  # Optional: Admin tools for database management
  pgadmin:
    <<: *service_defaults
    image: dpage/pgadmin4:8
    container_name: pgadmin_tool
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - microservices_network
    profiles:
      - admin-tools
  
  # Optional: The mock Azure AD authentication server
  mock-auth-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./mock_auth_service/Dockerfile
    environment:
      - API_PORT=8000
    env_file:
      - docker-compose.env
    container_name: mock_auth_service
    ports:
      - "8005:8000"
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  openai-mock-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./openai_mock_service/Dockerfile
    container_name: openai_mock_service
    ports:
      - "8010:8000"
    env_file:
      - docker-compose.env
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 10s
    restart: unless-stopped
    profiles:
      - e2e-tests

  gpt-oss-service:
    <<: *service_defaults
    build:
      context: ./services
      dockerfile: ./gpt_oss/Dockerfile
    container_name: gpt_oss_service
    ports:
      - "8010:11434"
    env_file:
      - docker-compose.env
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/v1/models"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    profiles:
      - gpt-oss

  # End-to-end integration tests
  e2e-tests:
    <<: *service_defaults
    build:
      context: ./e2e_tests
      dockerfile: ./Dockerfile
    container_name: e2e_tests_runner
    environment:
      # Override service URLs to use internal docker network hostnames
      - PROJECT_MANAGEMENT_SERVICE_URL=http://project-management-service:8000
      - DOCUMENT_PROCESSING_URL=http://document-processing-service:8000
      - NEO4J_INGESTION_URL=http://neo4j-ingestion-service:8000
      - AZURE_AD_AUTHORITY=http://host.docker.internal:8005
      - INIT_DB_SERVICE_URL=http://db-init-service:8000
      - NEO4J_MAINTENANCE_URL=http://neo4j-maintenance-service:8000
      - UI_SERVICE_URL=http://ui-service:8000
      - AI_WORKFLOW_SERVICE_URL=http://ai-workflow-service:8000
      - NEO4J_RETRIEVAL_URL=http://neo4j-retrieval-service:8000
      - OPENAI_MOCK_URL=http://openai-mock-service:8000
    env_file:
      - docker-compose.env
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-init-service:
        condition: service_healthy
      neo4j-maintenance-service:
        condition: service_healthy
      neo4j-schema-init:
        condition: service_completed_successfully
      neo4j-ingestion-service:
        condition: service_healthy
      project-management-service:
        condition: service_healthy
      document-processing-service:
        condition: service_healthy
      mock-auth-service:
        condition: service_healthy
      openai-mock-service:
        condition: service_healthy
    networks:
      - microservices_network
    volumes:
      # Mount test results and logs for external access
      - ./e2e_tests/test-results:/e2e-tests/test-results
    restart: "no"  # Don't restart - tests should run once
    profiles:
      - e2e-tests  # Optional profile to run tests on demand

networks:
  microservices_network:
    driver: bridge
    name: git_epic_creator_network

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_plugins:
    driver: local
  neo4j_config:
    driver: local
  redis_data:
    driver: local
  azurite_data:
    driver: local
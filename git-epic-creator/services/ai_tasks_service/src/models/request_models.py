"""Request and response models for AI Tasks Service API."""

from typing import List, Optional, Dict, Any
from uuid import UUID
from pydantic import BaseModel, Field

from .backlog_models import Epic


class TasksChatRequest(BaseModel):
    """Chat-style request for backlog generation or refinement."""

    project_id: UUID = Field(..., description="Project identifier")
    prompt_id: Optional[UUID] = Field(None, description="Conversation thread ID (omit for new conversation)")
    message: str = Field(..., description="User message (initial requirements or follow-up answer)")
    options: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional parameters: top_k, similarity_threshold, max_iters",
    )


class ClarificationQuestion(BaseModel):
    """A clarification question generated by the system."""

    id: str = Field(..., description="Question identifier")
    text: str = Field(..., description="Question text")


class GeneratedBacklogBundle(BaseModel):
    """Generated backlog bundle with epics, tasks, and metadata."""

    prompt_id: UUID = Field(..., description="Conversation thread identifier")
    project_id: UUID = Field(..., description="Project identifier")
    epics: List[Epic] = Field(default_factory=list, description="Generated epics with tasks")
    assumptions: List[str] = Field(default_factory=list, description="Assumptions made during generation")
    risks: List[str] = Field(default_factory=list, description="Identified risks")
    score: float = Field(..., ge=0.0, le=1.0, description="Overall quality score")
    coverage_components: Optional[Dict[str, float]] = Field(
        None,
        description="Component scores: coverage, specificity, feasibility, duplication",
    )
    clarification_questions: Optional[List[ClarificationQuestion]] = Field(
        None,
        description="Questions to improve score (present if score < target)",
    )
    markdown_text: Optional[str] = Field(
        None,
        description="Markdown-formatted backlog for display",
    )


